# TBD: proxysql instead of tcp tunnel
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: proxysql-config
# data:
#   proxysql.cnf: |
#     datadir="/var/lib/proxysql"

#     admin_variables=
#     {
#         admin_credentials="admin:admin;radmin:radmin"
#         mysql_ifaces="0.0.0.0:6032"
#     }

#     mysql_variables=
#     {
#         threads=4
#         max_connections=2048
#         default_query_delay=0
#         default_query_timeout=36000000
#         have_compress=true
#         poll_timeout=2000
#         interfaces="0.0.0.0:6033"
#         default_schema="information_schema"
#         stacksize=1048576
#         server_version="5.5.30"
#         connect_timeout_server=3000
#         monitor_username="monitor"
#         monitor_password="monitor"
#         monitor_history=600000
#         monitor_connect_interval=60000
#         monitor_ping_interval=10000
#         monitor_read_only_interval=1500
#         monitor_read_only_timeout=500
#         ping_interval_server_msec=120000
#         ping_timeout_server=500
#         commands_stats=true
#         sessions_sort=true
#         connect_retries_on_failure=10
#     }

---
apiVersion: apps/v1
kind: Deployment
metadata:
{{- if hasKey .Values.web "deployment" }}
{{- if .Values.web.deployment.annotations }}
  annotations:
{{ toYaml .Values.web.deployment.annotations | indent 4 }}
{{- else }}
  annotations: {}
{{- end }}
{{- end }}
  labels:
    app: frontline-cloud
    service: web
  name: frontline-cloud-web
spec:
  minReadySeconds: 5
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: frontline-cloud
      service: web
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: frontline-cloud
        service: web
    spec:
      containers:
      # frontline
      - name: web
        image: {{ .Values.web.image.repository }}/{{ .Values.web.image.name }}:{{ .Values.web.image.tag }}
        imagePullPolicy: Always
        # command:
        # - /bin/bash
        # - /entrypoint.CES.sh
        # - start
        # livenessProbe:
        #   initialDelaySeconds: 60
        #   periodSeconds: 30
        #   failureThreshold: 10
        #   httpGet:
        #     path: /
        #     port: http
        env:
        - { name: ENABLE_MYSQL_SIMPLEPROXY, value: "true" }
        - { name: LISTENER_FORCE_SSL_SCHEME, value: "true" }
        - name: MYSQL_HOST
          value: {{ .Values.config.db.host | default "mysql" | quote }}
        - name: MYSQL_PORT
          value: {{ .Values.config.db.port | quote }}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: {{ .Values.web.limits.cpu }}
            memory: {{ .Values.web.limits.memory }}
          requests:
            cpu: {{ .Values.web.requests.cpu }}
            memory: {{ .Values.web.requests.memory }}
      terminationGracePeriodSeconds: 15
    # # proxysql
    # # TBD: proxysql instead of tunnel
    # - name: proxysql
    #   image: mirror.gcr.io/proxysql/proxysql:latest
    #   command:
    #   - ...
    #   env:
    #   - name: DB_HOST
    #     value: {{ .Values.config.db.host }}
    #   - name: DB_PORT
    #     value: {{ .Values.config.db.port | quote }}
    #   - name: DB_DATABASE
    #     value: {{ .Values.config.db.database }}
    #   - name: DB_USERNAME
    #     value: {{ .Values.config.db.username }}
    #   - name: DB_PASSWORD
    #     {{- if .Values.config.db.password_secret }}
    #     valueFrom:
    #       secretKeyRef:
    #         name: {{ .Values.config.db.password_secret.name }}
    #         key: {{ .Values.config.db.password_secret.key }}
    #     {{- else }}
    #     value: {{ .Values.config.db.password | quote }}
    #     {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontline-cloud
    service: web
  name: frontline-cloud-web
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: frontline-cloud
    service: web
  type: ClusterIP


{{- if .Values.web.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
{{- if .Values.web.ingress.annotations }}
  annotations:
{{ toYaml .Values.web.ingress.annotations | indent 4 }}
{{- else }}
  annotations: {}
{{- end }}
  name: frontline-cloud-web
spec:
  rules:
  - host: {{ .Values.web.ingress.host | quote }}
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: frontline-cloud-web
            port:
              name: http
{{- if .Values.web.ingress.tls }}
  tls:
{{ toYaml .Values.web.ingress.tls | indent 4 }}
{{- end -}}
{{- end }}